/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package glcd.UI;

import glcd.GLCDImageLoader.RawImage;
import glcd.Util;
import java.awt.Frame;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author ideras
 */
public class ExportImagesForm extends javax.swing.JDialog {

    private final List<ImageItem> imageItems;
    private int generateOption;
    private final JFileChooser fileChooser;
    private final FileFilter fileFilter;

    /**
     * Creates new form ExportSettingsForm
     */
    public ExportImagesForm(Frame owner, List<ImageItem> imageItems) {
        super(owner, true);
        
        initComponents();

        this.imageItems = imageItems;

        DefaultListModel<ImageItem> lm = (DefaultListModel<ImageItem>) lstImages.getModel();
        for (ImageItem imageItem : imageItems) {
            lm.addElement(imageItem);
        }
        generateOption = 0;
        fileChooser = new JFileChooser();
        fileFilter = new FileNameExtensionFilter("C source code (*.c, *.h, *.txt)", new String[]{"c", "C", "h", "H", "txt", "TXT"});
    }

    File openFile(String title) {
        String outputFilePath = txtOutputFile.getText().trim();
        fileChooser.setFileFilter(fileFilter);
        fileChooser.setDialogTitle(title);
        fileChooser.setMultiSelectionEnabled(false);

        if (!outputFilePath.isEmpty()) {
            fileChooser.setSelectedFile(new File(outputFilePath));
        } else {
            fileChooser.setSelectedFile(new File("/media/win_d/Development/Lab15_SpaceInvaders/*"));
        }

        int result = fileChooser.showSaveDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            return fileChooser.getSelectedFile();
        } else {
            return null;
        }
    }

    private boolean applySettings() {
        String fileExtension = txtFileExtension.getText().trim();

        if (fileExtension.isEmpty()) {
            JOptionPane.showMessageDialog(this, "You should specify output file extension", "Error", JOptionPane.ERROR_MESSAGE);
            txtFileExtension.requestFocus();
            return false;
        }

        int outputFormat;
        switch (comboBoxImageFormat.getSelectedIndex()) {
            case 0:
                outputFormat = RawImage.GENERIC_1BPP_PAGED;
                break;
            case 1:
                outputFormat = RawImage.WINDOWS_BMP_4BPP;
                break;
            case 2:
                outputFormat = RawImage.GENERIC_1BPP_LINEAR;
                break;
            case 3:
                outputFormat = RawImage.GENERIC_BMP_4BPP;
                break;
            default:
                outputFormat = RawImage.GENERIC_1BPP_PAGED;
        }

        String outputPath;
        if (rbOneFilePerImage.isSelected()) {
            outputPath = txtOutputDirectory.getText().trim();

            for (ImageItem imageItem : imageItems) {
                imageItem.setOutputFormat(outputFormat);

                String outDir = outputPath;
                if (outDir.isEmpty()) {
                    outDir = new File(imageItem.getImageFilePath()).getParent();
                }

                String outputFilePath = outDir + File.separatorChar + glcd.Util.rename(imageItem.getImageName(), fileExtension);

                imageItem.setImageOutputFilePath(outputFilePath);
                txtLog.setText(txtLog.getText() + "Updating information for image \"" + imageItem.getImageName() + "\", output file : \"" + outputFilePath + "\"\n");
            }
            generateOption = 0;
        } else {
            outputPath = txtOutputFile.getText().trim();

            if (outputPath.isEmpty()) {
                JOptionPane.showMessageDialog(this, "You should specify an output file !", "Error", JOptionPane.ERROR_MESSAGE);
                txtOutputFile.requestFocus();
                return false;
            }

            for (ImageItem imageItem : imageItems) {
                imageItem.setOutputFormat(outputFormat);
                imageItem.setImageOutputFilePath(outputPath);

                txtLog.setText(txtLog.getText() + "Updating information for image \"" + imageItem.getImageName() + "\", output file : \"" + outputPath + "\"\n");
            }
            generateOption = 1;
        }

        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupOutputFileOptions = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstImages = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        txtOutputDirectory = new javax.swing.JTextField();
        btnBrowseDirectory = new javax.swing.JButton();
        rbAllImagesInOneFile = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        rbOneFilePerImage = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        txtOutputFile = new javax.swing.JTextField();
        btnBrowseOutputFile = new javax.swing.JButton();
        btnApplySettings = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        comboBoxImageFormat = new javax.swing.JComboBox();
        btnExportImages = new javax.swing.JButton();
        txtFileExtension = new javax.swing.JTextField();
        btnCloseForm = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Export images to C source file");

        jLabel1.setText("Images to export");

        lstImages.setModel(new javax.swing.DefaultListModel<ImageItem>());
        jScrollPane1.setViewportView(lstImages);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Export Settings", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N

        jLabel2.setText("File Extension:");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Output file options", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N

        txtOutputDirectory.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnBrowseDirectory.setText("...");
        btnBrowseDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseDirectoryActionPerformed(evt);
            }
        });

        buttonGroupOutputFileOptions.add(rbAllImagesInOneFile);
        rbAllImagesInOneFile.setText("Put all the images in one C file");
        rbAllImagesInOneFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbAllImagesInOneFileActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel3.setText("Output directory:");

        buttonGroupOutputFileOptions.add(rbOneFilePerImage);
        rbOneFilePerImage.setSelected(true);
        rbOneFilePerImage.setText("Generate one C source file per image");
        rbOneFilePerImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbOneFilePerImageActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel4.setText("Output file path:");

        txtOutputFile.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtOutputFile.setEnabled(false);

        btnBrowseOutputFile.setText("...");
        btnBrowseOutputFile.setEnabled(false);
        btnBrowseOutputFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseOutputFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 16, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(txtOutputFile, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnBrowseOutputFile)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(txtOutputDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnBrowseDirectory)))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbOneFilePerImage)
                            .addComponent(rbAllImagesInOneFile))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(rbOneFilePerImage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtOutputDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowseDirectory))
                .addGap(18, 18, 18)
                .addComponent(rbAllImagesInOneFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtOutputFile, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowseOutputFile))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnApplySettings.setText("Apply");
        btnApplySettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplySettingsActionPerformed(evt);
            }
        });

        jLabel5.setText("Image format: ");

        comboBoxImageFormat.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        comboBoxImageFormat.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Generic Bitmap 1 BPP Paged", "Windows Bitmap 4 BPP", "Generic Bitmap 1 BPP Linear", "Generic Bitmap 4 BPP" }));
        comboBoxImageFormat.setSelectedIndex(2);

        btnExportImages.setText("Export images");
        btnExportImages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportImagesActionPerformed(evt);
            }
        });

        txtFileExtension.setText("h");
        txtFileExtension.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnCloseForm.setText("Close Dialog");
        btnCloseForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseFormActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnApplySettings)
                        .addGap(81, 81, 81)
                        .addComponent(btnExportImages)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCloseForm))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFileExtension, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboBoxImageFormat, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtFileExtension)
                        .addGap(5, 5, 5)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxImageFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnApplySettings)
                    .addComponent(btnExportImages)
                    .addComponent(btnCloseForm))
                .addContainerGap(63, Short.MAX_VALUE))
        );

        jLabel6.setText("Export log");

        txtLog.setColumns(20);
        txtLog.setRows(5);
        jScrollPane2.setViewportView(txtLog);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 761, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnApplySettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplySettingsActionPerformed
        applySettings();
    }//GEN-LAST:event_btnApplySettingsActionPerformed

    private void btnBrowseOutputFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseOutputFileActionPerformed
        File selectedFile = openFile("Choose an output file");

        if (selectedFile != null) {
            txtOutputFile.setText(selectedFile.getAbsolutePath());
        }
    }//GEN-LAST:event_btnBrowseOutputFileActionPerformed

    private void rbAllImagesInOneFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbAllImagesInOneFileActionPerformed
        if (rbAllImagesInOneFile.isSelected()) {
            txtOutputFile.setEnabled(true);
            btnBrowseOutputFile.setEnabled(true);

            txtOutputDirectory.setEnabled(false);
            btnBrowseDirectory.setEnabled(false);
        }
    }//GEN-LAST:event_rbAllImagesInOneFileActionPerformed

    private void rbOneFilePerImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbOneFilePerImageActionPerformed
        if (rbOneFilePerImage.isSelected()) {
            txtOutputFile.setEnabled(false);
            btnBrowseOutputFile.setEnabled(false);

            txtOutputDirectory.setEnabled(true);
            btnBrowseDirectory.setEnabled(true);
        }
    }//GEN-LAST:event_rbOneFilePerImageActionPerformed

    private void btnExportImagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportImagesActionPerformed
        if (!applySettings()) {
            return;
        }

        txtLog.setText("");
        
        if (this.generateOption == 0) {
            for (ImageItem imageItem : imageItems) {
                txtLog.setText(txtLog.getText() + "Generating image \"" + imageItem.getImageName() + "\"...\n");

                String code = imageItem.generateCCode();
                File outputFile = new File(imageItem.getImageOutputFilePath());

                try {
                    // if file doesn't exists, then create it
                    if (!outputFile.exists()) {
                        outputFile.createNewFile();

                    }

                    FileOutputStream ostream = new FileOutputStream(outputFile);
                    PrintWriter output = new PrintWriter(ostream);

                    output.print(code);

                    output.flush();
                    output.close();
                    ostream.close();
                    txtLog.setText(txtLog.getText() + "DONE.\n");
                } catch (IOException ex) {
                    txtLog.setText(txtLog.getText() + "ERROR: \"" + ex.getMessage() + "\"\n");
                }
            }
        } else {
            String outputFilePath = txtOutputFile.getText();
            File outputFile = new File(outputFilePath);

            try {
                // if file doesn't exists, then create it
                if (!outputFile.exists()) {
                    outputFile.createNewFile();
                }

                FileOutputStream ostream = new FileOutputStream(outputFile);
                PrintWriter output = new PrintWriter(ostream);

                String outputFileName = outputFile.getName();
                
                //Write header to file
                output.print("/* File generated on: ");

                String dateTime = Util.getDateTime();

                output.print(" " + dateTime + " */\n\n");

                String headerName = outputFileName.toUpperCase();
                headerName = Util.replaceInvalidCharacters(headerName);

                output.print("#ifndef " + headerName + "\n");
                output.print("#define " + headerName + "\n\n");

                for (ImageItem imageItem : imageItems) {
                    txtLog.setText(txtLog.getText() + "Generating image \"" + imageItem.getImageName() + "\"...\n");

                    String code = imageItem.generateCCode();

                    output.print(code);
                    output.print("\n");

                    txtLog.setText(txtLog.getText() + "DONE.\n");
                    
                }
                
                output.print("#endif\n");
                
                output.flush();
                output.close();
                ostream.close();
                
            } catch (IOException ex) {
                txtLog.setText(txtLog.getText() + "ERROR: \"" + ex.getMessage() + "\"\n");
            }
        }
    }//GEN-LAST:event_btnExportImagesActionPerformed

    private void btnCloseFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseFormActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCloseFormActionPerformed

    private void btnBrowseDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseDirectoryActionPerformed
        String outputDirectory = txtOutputDirectory.getText().trim();
        fileChooser.setFileFilter(fileFilter);
        fileChooser.setDialogTitle("Select OUTPUT directory ...");
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(false);

        if (!outputDirectory.isEmpty()) {
            fileChooser.setSelectedFile(new File(outputDirectory));
        } else {
            fileChooser.setSelectedFile(new File("/media/win_d/Development/*"));
        }

        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            txtOutputDirectory.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_btnBrowseDirectoryActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApplySettings;
    private javax.swing.JButton btnBrowseDirectory;
    private javax.swing.JButton btnBrowseOutputFile;
    private javax.swing.JButton btnCloseForm;
    private javax.swing.JButton btnExportImages;
    private javax.swing.ButtonGroup buttonGroupOutputFileOptions;
    private javax.swing.JComboBox comboBoxImageFormat;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList lstImages;
    private javax.swing.JRadioButton rbAllImagesInOneFile;
    private javax.swing.JRadioButton rbOneFilePerImage;
    private javax.swing.JTextField txtFileExtension;
    private javax.swing.JTextArea txtLog;
    private javax.swing.JTextField txtOutputDirectory;
    private javax.swing.JTextField txtOutputFile;
    // End of variables declaration//GEN-END:variables
}
