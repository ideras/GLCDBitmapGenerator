/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package glcd.UI;

import glcd.GLCDImageLoader.GLCDImageLoaderException;
import glcd.GLCDImageLoader.RawImage;
import java.awt.HeadlessException;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author ideras
 */
public class MainForm extends javax.swing.JFrame {

    private ImageItem currentImageItem;
    private ImagePanel imagePanel;
    private final JFileChooser fileChooser;
    private final FileFilter imageFilter;
    private final FileFilter cSourceFilter;

    /**
     * Creates new form MainForm2
     */
    public MainForm() {
        initComponents();

        currentImageItem = null;
        fileChooser = new JFileChooser();
        cSourceFilter = new FileNameExtensionFilter("C source code (*.c, *.h, *.txt)", new String[]{"c", "C", "h", "H", "txt", "TXT"});
        imageFilter = new FileNameExtensionFilter("Image files", ImageIO.getReaderFileSuffixes());
    }

    File[] openImageFiles(FileFilter filter, String title) {

        fileChooser.setFileFilter(filter);
        fileChooser.setDialogTitle(title);
        fileChooser.setMultiSelectionEnabled(true);

        if (currentImageItem != null) {
            fileChooser.setSelectedFile(new File(currentImageItem.getImageFilePath()));
        } else {
            fileChooser.setSelectedFile(new File("/media/win_d/Development/Lab15_SpaceInvaders/Lab15Files/SpaceInvadersArt/*"));
        }

        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            return fileChooser.getSelectedFiles();
        } else {
            return null;
        }
    }

    private void importImagesFromCSourceFile(File file, int format) throws IOException, GLCDImageLoaderException {
        List<RawImage> listRawImage = glcd.Util.importImageFromCSource(file, format);
        DefaultListModel<ImageItem> listModel = (DefaultListModel<ImageItem>) lstImages.getModel();

        for (RawImage rawImage : listRawImage) {
            try {
                BufferedImage image = rawImage.toImage();

                if (image == null) {
                    JOptionPane.showMessageDialog(this, "Error importing " + file.getName(), "ERROR", JOptionPane.ERROR_MESSAGE);
                    continue;
                }

                ImageItem imageItem = new ImageItem();
                imageItem.setImageName(rawImage.getName());
                imageItem.setImageFilePath(file.getAbsolutePath());
                imageItem.setImage(image);

                listModel.addElement(imageItem);
                lstImages.setSelectedValue(imageItem, true);

            } catch (GLCDImageLoaderException ex) {
                JOptionPane.showMessageDialog(this, "Error with: \"" + file.getName() + "\"\n" + ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            } catch (IndexOutOfBoundsException ex) {
                JOptionPane.showMessageDialog(this, "Error with: \"" + file.getName() + "\"\n" + ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupResolution = new javax.swing.ButtonGroup();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstImages = new javax.swing.JList();
        lstImages.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent evt) {
                if (!evt.getValueIsAdjusting()) {
                    List<ImageItem> selectedItems = lstImages.getSelectedValuesList();
                    int lastIndex = selectedItems.size()-1;

                    if (lastIndex >= 0) {
                        currentImageItem = selectedItems.get(lastIndex);
                        txtImageFileName.setText(currentImageItem.getImageFilePath());
                        lblWidth.setText("Width: " + currentImageItem.getWidth());
                        lblHeight.setText("Height: " + currentImageItem.getHeight());
                        sliderThreshold.setValue(currentImageItem.getThreshold());
                        chkInvertImagePixels.setSelected(currentImageItem.isInvertedPixels());
                    } else {
                        currentImageItem = null;
                        txtImageFileName.setText("");
                        lblWidth.setText("");
                        lblHeight.setText("");
                        sliderThreshold.setValue(50);
                        chkInvertImagePixels.setSelected(false);
                    }
                    imagePanel.setImageItem(currentImageItem);
                }
            }
        });
        btnImageExport = new javax.swing.JButton();
        btnImageClose = new javax.swing.JButton();
        btnImageOpen = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtOutputFileName = new javax.swing.JTextField();
        _imagePanel = _imagePanel = new ImagePanel();
        imagePanel = (ImagePanel)_imagePanel;
        lblWidth = new javax.swing.JLabel();
        lblHeight = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtImageFileName = new javax.swing.JTextField();
        btnBrowseOutputFile = new javax.swing.JButton();
        btnZoomPlus = new javax.swing.JButton();
        btnZoomMinus = new javax.swing.JButton();
        btnZoom1_1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        sliderThreshold = new javax.swing.JSlider();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        rbResolution2 = new javax.swing.JRadioButton();
        rbResolution1 = new javax.swing.JRadioButton();
        rbResolution3 = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        chkInvertImagePixels = new javax.swing.JCheckBox();
        btnShowPreview = new javax.swing.JButton();
        txtCustomWidth = new javax.swing.JFormattedTextField();
        txtCustomHeight = new javax.swing.JFormattedTextField();
        blockMinColor = new javax.swing.JPanel();
        blockMaxColor = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuItemOpen = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenu3 = new javax.swing.JMenu();
        menuItemImport1BPP_Paged = new javax.swing.JMenuItem();
        menuItemImportWinBMP4BPP = new javax.swing.JMenuItem();
        menuItemImport1BPP_Linear = new javax.swing.JMenuItem();
        menuItemImportGeneric4BPP = new javax.swing.JMenuItem();
        menuGenerateCCode = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        menuItemExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GLCD bitmap generator");
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jSplitPane2.setDividerLocation(280);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("Images");

        lstImages.setModel(new javax.swing.DefaultListModel<ImageItem>()
        );
        jScrollPane1.setViewportView(lstImages);

        btnImageExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/glcd/Icons/source_c.png"))); // NOI18N
        btnImageExport.setToolTipText("Export selected images to C code");
        btnImageExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImageExportActionPerformed(evt);
            }
        });

        btnImageClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/glcd/Icons/fileclose.png"))); // NOI18N
        btnImageClose.setToolTipText("Close selected images");
        btnImageClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImageCloseActionPerformed(evt);
            }
        });

        btnImageOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/glcd/Icons/fileopen.png"))); // NOI18N
        btnImageOpen.setToolTipText("Open image files ...");
        btnImageOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImageOpenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(btnImageOpen)
                                .addGap(18, 18, 18)
                                .addComponent(btnImageExport)
                                .addGap(18, 18, 18)
                                .addComponent(btnImageClose))
                            .addComponent(jLabel1))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnImageExport)
                    .addComponent(btnImageClose)
                    .addComponent(btnImageOpen))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jSplitPane2.setLeftComponent(jPanel1);

        jLabel2.setText("Image File:");

        txtOutputFileName.setMaximumSize(new java.awt.Dimension(6, 20));

        _imagePanel.setBackground(new java.awt.Color(255, 255, 255));
        _imagePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 4));

        javax.swing.GroupLayout _imagePanelLayout = new javax.swing.GroupLayout(_imagePanel);
        _imagePanel.setLayout(_imagePanelLayout);
        _imagePanelLayout.setHorizontalGroup(
            _imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        _imagePanelLayout.setVerticalGroup(
            _imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 203, Short.MAX_VALUE)
        );

        jLabel3.setText("Output File:");

        txtImageFileName.setMaximumSize(new java.awt.Dimension(6, 20));

        btnBrowseOutputFile.setText("...");
        btnBrowseOutputFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseOutputFileActionPerformed(evt);
            }
        });

        btnZoomPlus.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnZoomPlus.setText("+");
        btnZoomPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZoomPlusActionPerformed(evt);
            }
        });

        btnZoomMinus.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnZoomMinus.setText("-");
        btnZoomMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZoomMinusActionPerformed(evt);
            }
        });

        btnZoom1_1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnZoom1_1.setText("1:1");
        btnZoom1_1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZoom1_1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Threshold: ");

        sliderThreshold.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderThresholdStateChanged(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "GLCD Preview", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 18))); // NOI18N

        jLabel6.setText("Resolution");

        buttonGroupResolution.add(rbResolution2);
        rbResolution2.setText("84 x 48 (Nokia 5110)");

        buttonGroupResolution.add(rbResolution1);
        rbResolution1.setSelected(true);
        rbResolution1.setText("128 x 64 (KS0108)");

        buttonGroupResolution.add(rbResolution3);
        rbResolution3.setText("Custom: ");
        rbResolution3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rbResolution3StateChanged(evt);
            }
        });

        jLabel7.setText("X");

        chkInvertImagePixels.setText("Invert Image");
        chkInvertImagePixels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkInvertImagePixelsActionPerformed(evt);
            }
        });

        btnShowPreview.setText("Show Preview");
        btnShowPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowPreviewActionPerformed(evt);
            }
        });

        txtCustomWidth.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtCustomWidth.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###"))));
        txtCustomWidth.setText("128");

        txtCustomHeight.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtCustomHeight.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###"))));
        txtCustomHeight.setText("64");
        txtCustomHeight.setToolTipText("");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbResolution1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(rbResolution3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCustomWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCustomHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(rbResolution2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkInvertImagePixels)
                            .addComponent(btnShowPreview))
                        .addGap(72, 72, 72))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(chkInvertImagePixels)
                        .addGap(12, 12, 12)
                        .addComponent(btnShowPreview))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbResolution1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbResolution2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtCustomWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7)
                                .addComponent(txtCustomHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(rbResolution3)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(20, 20, 20))
        );

        blockMinColor.setBackground(java.awt.Color.black);

        javax.swing.GroupLayout blockMinColorLayout = new javax.swing.GroupLayout(blockMinColor);
        blockMinColor.setLayout(blockMinColorLayout);
        blockMinColorLayout.setHorizontalGroup(
            blockMinColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 26, Short.MAX_VALUE)
        );
        blockMinColorLayout.setVerticalGroup(
            blockMinColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 21, Short.MAX_VALUE)
        );

        blockMaxColor.setBackground(java.awt.Color.white);

        javax.swing.GroupLayout blockMaxColorLayout = new javax.swing.GroupLayout(blockMaxColor);
        blockMaxColor.setLayout(blockMaxColorLayout);
        blockMaxColorLayout.setHorizontalGroup(
            blockMaxColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 26, Short.MAX_VALUE)
        );
        blockMaxColorLayout.setVerticalGroup(
            blockMaxColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 21, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(6, 6, 6)
                        .addComponent(blockMinColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sliderThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(blockMaxColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtImageFileName, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                            .addComponent(txtOutputFileName, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                            .addComponent(_imagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(lblHeight, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                                        .addComponent(lblWidth, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(btnZoomPlus, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnZoomMinus, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnZoom1_1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(btnBrowseOutputFile)))))
                .addContainerGap(125, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtImageFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnZoomPlus)
                        .addGap(7, 7, 7)
                        .addComponent(btnZoomMinus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnZoom1_1)
                        .addGap(4, 4, 4)
                        .addComponent(lblWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(lblHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(_imagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtOutputFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnBrowseOutputFile))
                    .addComponent(jLabel3))
                .addGap(13, 13, 13)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel4)
                        .addComponent(sliderThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(blockMaxColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(blockMinColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)))
                .addGap(23, 23, 23)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(143, 143, 143))
        );

        jSplitPane2.setRightComponent(jPanel2);

        getContentPane().add(jSplitPane2);

        jMenu1.setText("File");

        menuItemOpen.setText("Open image file");
        menuItemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemOpenActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemOpen);
        jMenu1.add(jSeparator1);

        jMenu3.setText("Import images from C code");

        menuItemImport1BPP_Paged.setText("Generic Bitmap 1 BPP Paged");
        menuItemImport1BPP_Paged.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemImport1BPP_PagedActionPerformed(evt);
            }
        });
        jMenu3.add(menuItemImport1BPP_Paged);

        menuItemImportWinBMP4BPP.setText("Windows Bitmap 4BPP");
        menuItemImportWinBMP4BPP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemImportWinBMP4BPPActionPerformed(evt);
            }
        });
        jMenu3.add(menuItemImportWinBMP4BPP);

        menuItemImport1BPP_Linear.setText("Generic Bitmap 1BPP Linear");
        menuItemImport1BPP_Linear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemImport1BPP_LinearActionPerformed(evt);
            }
        });
        jMenu3.add(menuItemImport1BPP_Linear);

        menuItemImportGeneric4BPP.setText("Generic Bitmp 4BPP");
        menuItemImportGeneric4BPP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemImportGeneric4BPPActionPerformed(evt);
            }
        });
        jMenu3.add(menuItemImportGeneric4BPP);

        jMenu1.add(jMenu3);

        menuGenerateCCode.setText("Export images to C code");
        menuGenerateCCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGenerateCCodeActionPerformed(evt);
            }
        });
        jMenu1.add(menuGenerateCCode);
        jMenu1.add(jSeparator2);

        menuItemExit.setText("Exit");
        menuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemExitActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemExit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowseOutputFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseOutputFileActionPerformed

    }//GEN-LAST:event_btnBrowseOutputFileActionPerformed

    private void btnZoomPlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZoomPlusActionPerformed
        if (currentImageItem == null) {
            JOptionPane.showMessageDialog(this, "Please select an image first");
            return;
        }
        imagePanel.scaleImage(0.1f);
    }//GEN-LAST:event_btnZoomPlusActionPerformed

    private void btnZoomMinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZoomMinusActionPerformed
        if (currentImageItem == null) {
            JOptionPane.showMessageDialog(this, "Please select an image first");
            return;
        }
        imagePanel.scaleImage(-0.1f);
    }//GEN-LAST:event_btnZoomMinusActionPerformed

    private void btnZoom1_1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZoom1_1ActionPerformed
        if (currentImageItem == null) {
            JOptionPane.showMessageDialog(this, "Please select an image first");
            return;
        }
        currentImageItem.setScaleX(1.0f);
        currentImageItem.setScaleY(1.0f);
        imagePanel.repaint();
    }//GEN-LAST:event_btnZoom1_1ActionPerformed

    private void menuItemOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemOpenActionPerformed
        File[] selectedFiles = openImageFiles(imageFilter, "Open image files ...");

        if (selectedFiles == null) {
            return;
        }

        DefaultListModel<ImageItem> listModel = (DefaultListModel<ImageItem>) lstImages.getModel();

        for (File file : selectedFiles) {
            try {
                ImageItem imageItem = new ImageItem();
                imageItem.loadImageFromFile(file);

                listModel.addElement(imageItem);
                lstImages.setSelectedValue(imageItem, true);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Problem loading \"" + file.getName() + "\"\n" + ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            } catch (GLCDImageLoaderException ex) {
                JOptionPane.showMessageDialog(this, "Problem loading \"" + file.getName() + "\"\n" + ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            } catch (IndexOutOfBoundsException ex) {
                JOptionPane.showMessageDialog(this, "Problem loading \"" + file.getName() + "\"\n" + ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_menuItemOpenActionPerformed

    private void menuItemImport1BPP_PagedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemImport1BPP_PagedActionPerformed

        File[] selectedFiles = openImageFiles(cSourceFilter, "Import images from C source code ...");

        if (selectedFiles == null) {
            return;
        }

        for (File file : selectedFiles) {
            try {

                importImagesFromCSourceFile(file, RawImage.GENERIC_1BPP_PAGED);

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error with: \"" + file.getName() + "\"\n" + ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            } catch (GLCDImageLoaderException ex) {
                JOptionPane.showMessageDialog(this, "Error with: \"" + file.getName() + "\"\n" + ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            } catch (IndexOutOfBoundsException ex) {
                JOptionPane.showMessageDialog(this, "Error with: \"" + file.getName() + "\"\n" + ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_menuItemImport1BPP_PagedActionPerformed

    private void menuItemImportWinBMP4BPPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemImportWinBMP4BPPActionPerformed

        File[] selectedFiles = openImageFiles(cSourceFilter, "Import images from C source code ...");

        if (selectedFiles == null) {
            return;
        }

        DefaultListModel<ImageItem> listModel = (DefaultListModel<ImageItem>) lstImages.getModel();

        for (File file : selectedFiles) {

            try {
                importImagesFromCSourceFile(file, RawImage.WINDOWS_BMP_4BPP);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error with: \"" + file.getName() + "\"\n" + ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            } catch (GLCDImageLoaderException ex) {
                JOptionPane.showMessageDialog(this, "Error with: \"" + file.getName() + "\"\n" + ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            } catch (IndexOutOfBoundsException ex) {
                JOptionPane.showMessageDialog(this, "Error with: \"" + file.getName() + "\"\n" + ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_menuItemImportWinBMP4BPPActionPerformed

    private void sliderThresholdStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderThresholdStateChanged

        if (currentImageItem != null) {
            currentImageItem.setThreshold(sliderThreshold.getValue());
        }
    }//GEN-LAST:event_sliderThresholdStateChanged

    private void btnShowPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowPreviewActionPerformed

        if (currentImageItem == null) {
            JOptionPane.showMessageDialog(this, "Please select an image first");
            return;
        }

        int width, height;
        if (rbResolution1.isSelected()) {
            width = 128;
            height = 64;
        } else if (rbResolution2.isSelected()) {
            width = 84;
            height = 48;
        } else {
            String strW = txtCustomWidth.getText().trim();
            String strH = txtCustomHeight.getText().trim();

            if (strW.isEmpty() || strH.isEmpty()) {
                JOptionPane.showMessageDialog(this, "You must enter custom Width and Height.");
                return;
            }
            width = Integer.parseInt(strW);
            height = Integer.parseInt(strH);
        }

        if ((currentImageItem.getWidth() > width) || (currentImageItem.getHeight() > height)) {
            JOptionPane.showMessageDialog(this, "Image is too big for LCD.  Check resolution.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        GLCDPreviewForm frm = new GLCDPreviewForm(currentImageItem, width, height, sliderThreshold.getValue(), chkInvertImagePixels.isSelected());
        frm.setLocationRelativeTo(this);
        frm.setVisible(true);
    }//GEN-LAST:event_btnShowPreviewActionPerformed

    private void rbResolution3StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rbResolution3StateChanged
        if (rbResolution3.isSelected()) {
            txtCustomWidth.setEnabled(true);
            txtCustomHeight.setEnabled(true);
        } else {
            txtCustomWidth.setEnabled(false);
            txtCustomHeight.setEnabled(false);
        }
    }//GEN-LAST:event_rbResolution3StateChanged

    private void menuGenerateCCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGenerateCCodeActionPerformed
        DefaultListModel<ImageItem> lm = (DefaultListModel<ImageItem>) lstImages.getModel();

        List<ImageItem> imageItems = lstImages.getSelectedValuesList();

        if (imageItems.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No images selected.  Nothing to export !", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        ExportImagesForm frm = new ExportImagesForm(this, imageItems);
        frm.setLocationRelativeTo(this);
        frm.setVisible(true);
    }//GEN-LAST:event_menuGenerateCCodeActionPerformed

    private void chkInvertImagePixelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkInvertImagePixelsActionPerformed
        if (currentImageItem == null) {
            return;
        }

        if (chkInvertImagePixels.isSelected()) {
            currentImageItem.setInvertedPixels(true);
        } else {
            currentImageItem.setInvertedPixels(false);
        }
    }//GEN-LAST:event_chkInvertImagePixelsActionPerformed

    private void menuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_menuItemExitActionPerformed

    private void menuItemImport1BPP_LinearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemImport1BPP_LinearActionPerformed

        File[] selectedFiles = openImageFiles(cSourceFilter, "Import Generic Bitmap 1BPP from C source code ...");

        if (selectedFiles == null) {
            return;
        }

        DefaultListModel<ImageItem> listModel = (DefaultListModel<ImageItem>) lstImages.getModel();

        for (File file : selectedFiles) {
            try {
                importImagesFromCSourceFile(file, RawImage.GENERIC_1BPP_LINEAR);

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error with: \"" + file.getName() + "\"\n" + ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            } catch (GLCDImageLoaderException ex) {
                JOptionPane.showMessageDialog(this, "Error with: \"" + file.getName() + "\"\n" + ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            } catch (IndexOutOfBoundsException ex) {
                JOptionPane.showMessageDialog(this, "Error with: \"" + file.getName() + "\"\n" + ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_menuItemImport1BPP_LinearActionPerformed

    private void btnImageExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImageExportActionPerformed
        menuGenerateCCodeActionPerformed(evt);
    }//GEN-LAST:event_btnImageExportActionPerformed

    private void btnImageCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImageCloseActionPerformed
        DefaultListModel<ImageItem> lm = (DefaultListModel<ImageItem>) lstImages.getModel();

        List<ImageItem> imageItems = lstImages.getSelectedValuesList();

        for (ImageItem imageItem : imageItems) {
            lm.removeElement(imageItem);
        }
    }//GEN-LAST:event_btnImageCloseActionPerformed

    private void btnImageOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImageOpenActionPerformed
        menuItemOpenActionPerformed(evt);
    }//GEN-LAST:event_btnImageOpenActionPerformed

    private void menuItemImportGeneric4BPPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemImportGeneric4BPPActionPerformed
        File[] selectedFiles = openImageFiles(cSourceFilter, "Import Generic Bitmap 1BPP from C source code ...");

        if (selectedFiles == null) {
            return;
        }

        for (File file : selectedFiles) {
            try {
                importImagesFromCSourceFile(file, RawImage.GENERIC_BMP_4BPP);

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error with: \"" + file.getName() + "\"\n" + ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            } catch (GLCDImageLoaderException ex) {
                JOptionPane.showMessageDialog(this, "Error with: \"" + file.getName() + "\"\n" + ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            } catch (IndexOutOfBoundsException ex) {
                JOptionPane.showMessageDialog(this, "Error with: \"" + file.getName() + "\"\n" + ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_menuItemImportGeneric4BPPActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel _imagePanel;
    private javax.swing.JPanel blockMaxColor;
    private javax.swing.JPanel blockMinColor;
    private javax.swing.JButton btnBrowseOutputFile;
    private javax.swing.JButton btnImageClose;
    private javax.swing.JButton btnImageExport;
    private javax.swing.JButton btnImageOpen;
    private javax.swing.JButton btnShowPreview;
    private javax.swing.JButton btnZoom1_1;
    private javax.swing.JButton btnZoomMinus;
    private javax.swing.JButton btnZoomPlus;
    private javax.swing.ButtonGroup buttonGroupResolution;
    private javax.swing.JCheckBox chkInvertImagePixels;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JLabel lblHeight;
    private javax.swing.JLabel lblWidth;
    private javax.swing.JList lstImages;
    private javax.swing.JMenuItem menuGenerateCCode;
    private javax.swing.JMenuItem menuItemExit;
    private javax.swing.JMenuItem menuItemImport1BPP_Linear;
    private javax.swing.JMenuItem menuItemImport1BPP_Paged;
    private javax.swing.JMenuItem menuItemImportGeneric4BPP;
    private javax.swing.JMenuItem menuItemImportWinBMP4BPP;
    private javax.swing.JMenuItem menuItemOpen;
    private javax.swing.JRadioButton rbResolution1;
    private javax.swing.JRadioButton rbResolution2;
    private javax.swing.JRadioButton rbResolution3;
    private javax.swing.JSlider sliderThreshold;
    private javax.swing.JFormattedTextField txtCustomHeight;
    private javax.swing.JFormattedTextField txtCustomWidth;
    private javax.swing.JTextField txtImageFileName;
    private javax.swing.JTextField txtOutputFileName;
    // End of variables declaration//GEN-END:variables
}
